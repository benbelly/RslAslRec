(**
    Copyright 2011 Ben Holm

    This file is part of RslAslRec.

    RslAslRec is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    RslAslRec is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with RslAslRec.  If not, see <http://www.gnu.org/licenses/>.
**)


inc "itc-report.sml"

interp:
    file: string
    alpha : real
    truth : (string * int * int) list
    range : int * int
    level : int
    word : string
    score : real
    interval : int * int
    prevs : (string * int * int) list * real

fn main( outfile ) {
    (* ML *)
        val infile01 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-1.4-lipread-can-i/Full-Sentence/s5c1lipreadcani/levelbuilding-0.16-ifile"
        val infile02 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-1.4-lipread-can-i/Full-Sentence/s5c1lipreadcani/levelbuilding-0.28-ifile"
        val infile03 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-1.4-lipread-can-i/Full-Sentence/s5c1lipreadcani/levelbuilding-0.30-ifile"
        val infile04 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-2.4-lipread-cannot-i/Full-Sentence/s5c2lipreadcannoti/levelbuilding-0.16-ifile"
        val infile05 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-2.4-lipread-cannot-i/Full-Sentence/s5c2lipreadcannoti/levelbuilding-0.28-ifile"
        val infile06 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-2.4-lipread-cannot-i/Full-Sentence/s5c2lipreadcannoti/levelbuilding-0.30-ifile"
        val infile07 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-3.4-i-understand-not/Full-Sentence/s5c3youunderstand/levelbuilding-0.16-ifile"
        val infile08 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-3.4-i-understand-not/Full-Sentence/s5c3youunderstand/levelbuilding-0.28-ifile"
        val infile09 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-3.4-i-understand-not/Full-Sentence/s5c3youunderstand/levelbuilding-0.30-ifile"
        val infile10 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-7.4-dontknow-i/Full-Sentence/s5c7idontknow/levelbuilding-0.16-ifile"
        val infile11 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-7.4-dontknow-i/Full-Sentence/s5c7idontknow/levelbuilding-0.28-ifile"
        val infile12 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-7.4-dontknow-i/Full-Sentence/s5c7idontknow/levelbuilding-0.30-ifile"
        val infile13 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-10.4-i-need-that-i/Full-Sentence/s5c10ineedthatone/levelbuilding-0.16-ifile"
        val infile14 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-10.4-i-need-that-i/Full-Sentence/s5c10ineedthatone/levelbuilding-0.28-ifile"
        val infile15 = "/mnt/raid/bholm/USF-ASL-Data-Set-v2/Sentence-10.4-i-need-that-i/Full-Sentence/s5c10ineedthatone/levelbuilding-0.30-ifile"
    (* ML *)
    add infile01
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile01)
    }
    add infile02
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile02)
    }
    add infile03
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile03)
    }
    add infile04
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile04)
    }
    add infile05
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile05)
    }
    add infile06
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile06)
    }
    add infile07
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile07)
    }
    add infile08
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile08)
    }
    add infile09
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile09)
    }
    add infile10
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile10)
    }
    add infile11
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile11)
    }
    add infile12
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile12)
    }
    add infile13
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile13)
    }
    add infile14
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile14)
    }
    add infile15
    if observing file nofile {
        update alpha, file, truth, range: loadTruth(infile15)
    }
    write ifile to outfile
}

inc "aslalg.mlb"
inc "aslalg.sml"
inc "levelbuilding-external.sml"

interp:
    testFrames: int vector
    levelNum : int
    levelWord : int
    levelScores : real vector
    levelPrevs : (int list * real) vector

fn main ( inFile ) {
    test = "/home/bholm/USF-ASL-Data-Set-v2/Sentence 2.5 lipread cannot i"
    train = "/home/bholm/USF-ASL-Data-Set-v2"
    (*ML*)
        val _ = aslalgLoad train test
        val itemMap = itemIndexMap()
    (*ML*)

    [Init] munge: setDirs
    [LoadVideo] update testFrames: getIds()
    [LevelZero] update levelNum, levelWord,
                       levelScores, levelPrevs: levelZero(itemMap)

    [LevelCheck] while all observing levelNum belowMaxLevel( 20 ) {
        [OnlyHighestLevel] if all observing levelNum atMax {
            (* [NextLevel] update levelNum, levelScores, levelPrevs
                            observing levelWord testFrames: scoreNextLevels( itemMap )*)
        }
    }

    print ifile
}

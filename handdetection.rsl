inc "detect.mlb"
inc "hd-decision.sml"
inc "hd-interp.sml"

notes:
    FrameDiffs : real vector
    FrameId: int

interp:
    srcDir : string
    frameId : int
    keyframe : bool
    truehand : int vector
    frame : char vector * int * int * int
    gray : char vector * int * int * int
    skin : char vector * int * int * int
    diff : char vector * int * int * int
    boundary : char vector * int * int * int

(*ML*)
    val printSDs = fn _ => let val _ = Cvsl.saveAllImages "cvsl_out/sd" "png" 3 in "" end
(*ML*)

fn fShowFrames() {
    print "Displaying frames (press any key to advance)"
    print all: sNumFramesMsg
    write all observing frame to "/dev/null": sDisplayFrames
}

fn fShowDifferences() {
    print "Displaying difference images (press any key to advance)"
    print all: sNumFramesMsg
    write all observing diff to "/dev/null": sDisplayDifferences
}

fn fShowBoundaries() {
    print "Displaying boundary images (press any key to advance)"
    print all: sNumFramesMsg
    write all observing boundary to "/dev/null": sDisplayBoundaries
}

fn fShowUnique() {
    (* Identify unique frames and discard, keeping current interp. set *)
    duplicate     
        { 
            [ Unique ] update: uniqueDiffImage 
            print "Unique frames:"
            print all: sNumFramesMsg

            (* fShowDifferences() *)
            reject
        } 
        {     
            accept 
        }
}

fn getHandContours() {

    (* Section 4.1, step 2.a *)
    [DiffImage] update all diff
                observing keyframe, frameId, gray: initialDiffImages
    
    (* Section 4.1, step 2.b part 1 *)
    [SkinmaskDiff] update diff observing frameId, skin: skinmaskDiffs

    (* Section 4.1, steps c and d *)
    [EdgeAndMask] update diff observing frameId: edgeAndMaskDiffs

    (* Section 4.1, step e *)
    [RemoveSmallComponents] update diff observing frameId: removeSmallComponents

    (* Section 4.1, step f *)
    [BoundaryImage] update boundary observing frameId, diff: extractBoundary

    fShowBoundaries()

}

fn main(test, minMaxPixelComponentSize) {
    t1 = valOf(Int.fromString(minMaxPixelComponentSize))
    print "Input file:"
    print test
    print "T1:"
    print minMaxPixelComponentSize

    (* Create initial interpretation, attach directory for frame images *)
    munge: initInterp
    update srcDir: loadDir( test )

    [GetFrames] update frameId, frame: getFramesImages
    print "Loading images"

    (* Get the skin, grayscale, and key frames used by other steps *)
    [GetSkinMask] update skin observing frameId: skinMasks
    [GetGrayScale] update gray observing frameId: grayScales
    [FindKeyFrames] update all keyframe observing frameId: keyframes(t1)

    getHandContours()

}

hfn report() {
    reject
    print "QUERYING:"

    hadd ["GetFrames"]
    print "Number of original frames:"
    print all: sNumFramesMsg
    hprint all: sHprintUserTable
    reject

    hadd all
    print "Number of Frames Produced In Total:"
    print all:sNumFramesMsg
    hprint all: sHprintUserTable
    reject

    hadd ["Skinmask","Diff"]
    print "Number of unique frames at Skinmask... and Diff...:"
    print all: sNumFramesMsg
    hprint all: sHprintUserTable
    fShowUnique()
    reject

    hadd [ "Unique" ]
    print "Number of unqiue frames for diff images (2 locs):"
    print all: sNumFramesMsg
}

inc "detect.mlb"
inc "handdetectionhelp.sml"
inc "handdetectionfuns.sml"

notes:
    FrameDiffs : real vector

interp:
    srcDir : string
    frame : int
    keyframe : bool
    diff : int
	img: char vector * int * int * int

(*ML*)
        val printSDs = fn _ => let val _ = Cvsl.saveAllImages "cvsl_out/sd" "png" 3 in "" end
(*ML*)

fn fShowFrames() {
	print "Displaying frames (press any key to advance)"
	print all: sNumFramesMsg
	write all observing img to "/dev/null": sDisplayFrames
}

fn fShowUnique() {
	(* Identify unique frames and discard, keeping current interp. set *)
	duplicate 	
		{ 
			update: uniqueImage 
			print "Unique frames:"
			fShowFrames()
			print ifile
			reject
		} 
		{ 	
			accept 
		}
}

fn main(test) {
    t1 = 300
    (*ML*)
        val printSDs = fn _ => let val _ = Cvsl.saveAllImages "cvsl_out/sd" "png" 3 in "" end
    (*ML*)
    (* test = "/home/rlaz/raid/USF-ASL-Data-Set-v2/Sentence 2.5 lipread cannot i" *)
	print "Input file:"
	print test

	(* Create initial interpretation, attach directory for frame images *)
    munge: initInterp
    update srcDir: loadDir( test )

    [GetFrames] update frame, img: getFramesImages
	print "Loading images"
	fShowFrames()

    [FindKeyFrames] update all keyframe observing frame: keyframes(t1)
	if observing keyframe bIsKeyFrame {
		print "Key Frames:"
		fShowFrames()
	}

	fShowUnique()

    [DifferenceImages] update all diff, img observing frame: dDifferenceImages

    (* print all: printSDs
    print all: len *)
	fShowFrames()
}

hfn report() {
    print "reporting"
    hadd ["FindKeyFrames"]
}

inc "detect.mlb"
inc "handdetectionhelp.sml"
inc "handdetectionfuns.sml"

notes:
    FrameDiffs : real vector

interp:
    srcDir : string
    frameId : int
    frame : char vector * int * int * int
    keyframe : bool
    diff : int

(*ML*)
        val printSDs = fn _ => let val _ = Cvsl.saveAllImages "cvsl_out/sd" "png" 3 in "" end
(*ML*)

fn fShowFrames() {
    print "Displaying frames (press any key to advance)"
    print all: sNumFramesMsg
    write all observing frame to "/dev/null": sDisplayFrames
}

fn fShowUnique() {
    (* Identify unique frames and discard, keeping current interp. set *)
    duplicate     
        { 
            update: uniqueImage 
            print "Unique frames:"
            fShowFrames()
            print ifile
            reject
        } 
        {     
            accept 
        }
}

fn main(test, minMaxPixelComponentSize) {
    t1 = valOf(Int.fromString(minMaxPixelComponentSize))
	print "Input file:"
	print test
    print "T1:"
    print minMaxPixelComponentSize

    (* Create initial interpretation, attach directory for frame images *)
    munge: initInterp
    update srcDir: loadDir( test )

    [GetFrames] update frameId, frame: getFramesImages
	print "Loading images"
	print all: sNumFramesMsg
	(* fShowFrames() *)

    [FindKeyFrames] update all keyframe observing frameId: keyframes(t1)
    if observing keyframe bIsKeyFrame {
        print "Key Frames:"
        fShowFrames()
    }

    fShowUnique()

    [DifferenceImages] update all diff, frame observing frameId: dDifferenceImages

    (* print all: printSDs
    print all: len *)
    fShowFrames()
}

hfn report() {
    print "reporting"
    hadd ["FindKeyFrames"]
}

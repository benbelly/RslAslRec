(**
    Copyright 2011 Ben Holm

    This file is part of RslAslRec.

    RslAslRec is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    RslAslRec is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with RslAslRec.  If not, see <http://www.gnu.org/licenses/>.
**)

inc "detect.mlb"
inc "hd-decision.sml"
inc "hd-interp.sml"

notes:
    FrameDiffs : real vector
    FrameId: int

interp:
    srcDir : string
    frameId : int
    keyframe : bool
    truehand : int vector
    frame : char vector * int * int * int
    gray : char vector * int * int * int
    skin : char vector * int * int * int
    handImage : char vector * int * int * int

fn fShowFrames() {
    print "Displaying frames (press any key to advance)"
    print all: sNumFramesMsg
    write all observing frame to "/dev/null": sDisplayFrames
}

fn fShowDifferences() {
    print "Displaying difference images (press any key to advance)"
    print all: sNumFramesMsg
    write all observing handImage to "/dev/null": sDisplayDifferences
}

fn fShowUnique() {
    (* Identify unique frames and discard, keeping current interp. set *)
    duplicate     
        { 
            [ Unique ] update: uniqueDiffImage 
            print "Unique frames:"
            print all: sNumFramesMsg

            reject
        } 
        {     
            accept 
        }
}

fn getHandContours() {

    (* Section 4.1, step 2.a *)
    [DiffImage] update all handImage
                observing keyframe, frameId, gray: initialDiffImages
    
    (* Section 4.1, step 2.b part 1 *)
    [SkinmaskDiff] update handImage
                   observing frameId, skin: skinmaskDiffs

    (* Section 4.1, steps c and d *)
    [EdgeAndMask] update handImage
                  observing frameId: edgeAndMaskDiffs

    (* Section 4.1, step e *)
    [RemoveSmallComponents] update handImage
                            observing frameId: removeSmallComponents

    (* Section 4.1, step f *)
    [BoundaryImage] update handImage
                    observing frameId: extractBoundary
}

fn main(test, train, minMaxPixelComponentSize) {
    t1 = valOf(Int.fromString(minMaxPixelComponentSize))
    (*
    print "Input file:"
    print test
    print "\nT1:"
    print minMaxPixelComponentSize
    print "\n"
    *)

    (* Create initial interpretation, attach directory for frame images *)
    munge: initInterp
    update srcDir: loadDir( test, train )

    [GetFrames] update frameId, frame, truehand: getFramesImages(test)
    (* print "Loading images\n" *)

    (* Get the skin, grayscale, and key frames used by other steps *)
    [GetSkinMask] update skin observing frameId: skinMasks
    [GetGrayScale] update gray observing frameId: grayScales
    [FindKeyFrames] update all keyframe observing frameId: keyframes(t1)
    if observing keyframe bIsKeyFrame {
        print "Keyframe count: "
        print all: sNumFramesMsg
    }

    getHandContours()

}

hfn report() {
    reject

    (*
    diffAccuracy("DiffImage")
    diffAccuracy("SkinmaskDiff")
    diffAccuracy("EdgeAndMask")
    diffAccuracy("RemoveSmallComponents")
    diffAccuracy("BoundaryImage")
    *)

    (*
    hadd ["DiffImage"]
    print "\n\nStep 2a\n"
    print: sPrintCenterAccuracy
    reject

    hadd ["SkinmaskDiff"]
    print "\n\nStep 2b\n"
    print: sPrintCenterAccuracy
    reject

    hadd ["EdgeAndMask"]
    print "\n\nStep 2c and 2d\n"
    print: sPrintCenterAccuracy
    reject

    hadd ["RemoveSmallComponents"]
    print "\n\nStep 2e\n"
    print: sPrintCenterAccuracy
    reject

    hadd ["BoundaryImage"]
    print "\n\nStep 2f\n"
    print: sPrintCenterAccuracy
    reject
    *)

    hadd ["FindKeyFrames"]
    hprint all: sHprintDiffs
    reject

}
